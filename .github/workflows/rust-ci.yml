name: XyVERX CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Basic functionality checks
  check:
    name: Check & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt, rust-src
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Clippy Lints
        run: cargo clippy -- -D warnings
      - name: Run check
        run: cargo check --all-features

  # Build the project on multiple platforms
  build:
    name: Build on ${{ matrix.os }}
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cuda: true
            opencl: true
          - os: windows-latest
            cuda: true
            opencl: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config libssl-dev libstdc++-12-dev
          
      # CUDA setup for Linux
      - name: Setup CUDA on Linux
        if: matrix.cuda && matrix.os == 'ubuntu-latest'
        uses: Jimver/cuda-toolkit@v0.2.14
        with:
          cuda: '12.6.0'
      
      # CUDA setup for Windows
      - name: Setup CUDA on Windows
        if: matrix.cuda && matrix.os == 'windows-latest'
        uses: Jimver/cuda-toolkit@v0.2.14
        with:
          cuda: '12.6.0'
      
      # OpenCL setup for Linux
      - name: Setup OpenCL on Linux
        if: matrix.opencl && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y ocl-icd-opencl-dev opencl-headers clinfo
      
      # Cache dependencies to speed up builds
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      # Setup tmate session for debugging if requested
      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug }}
        with:
          limit-access-to-actor: true
      
      # Create platform-specific config.toml
      - name: Create Linux config.toml
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [target.x86_64-unknown-linux-gnu]
          rustflags = []

          [build]
          rustflags = []

          [env]
          RUSTC_LOG = "warn"
          RUST_BACKTRACE = "1"
          RUST_LOG = "warn"

          [unstable]
          build-std = ["std", "core", "alloc"]
          EOF
      
      # Keep Windows config.toml as-is
      - name: Ensure config.toml exists on Windows
        if: matrix.os == 'windows-latest'
        run: |
          if (-not (Test-Path .cargo)) { mkdir .cargo }
          if (-not (Test-Path .cargo/config.toml)) {
            @"
          [target.x86_64-pc-windows-msvc]
          rustflags = ["-Clink-args=/DEFAULTLIB:libcmt"]

          [build]
          rustflags = ["-C", "target-feature=+crt-static"]

          [env]
          RUSTC_LOG = "warn"
          RUST_BACKTRACE = "1"
          RUST_LOG = "warn"

          [unstable]
          build-std = ["std", "core", "alloc"]
          "@ | Out-File -FilePath .cargo/config.toml -Encoding utf8
          }
        shell: pwsh
      
      # Build with CPU features
      - name: Build with CPU features
        run: cargo build --features cpu,avx2,openmp
      
      # Build with CUDA if available
      - name: Build with CUDA
        if: matrix.cuda
        run: cargo build --features cuda
      
      # Build with OpenCL if available
      - name: Build with OpenCL
        if: matrix.opencl
        run: cargo build --features opencl
  
  # Run tests
  test:
    name: Run Tests on ${{ matrix.os }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config libssl-dev libstdc++-12-dev
      
      # Create platform-specific config.toml
      - name: Create Linux config.toml
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [target.x86_64-unknown-linux-gnu]
          rustflags = []

          [build]
          rustflags = []

          [env]
          RUSTC_LOG = "warn"
          RUST_BACKTRACE = "1"
          RUST_LOG = "warn"

          [unstable]
          build-std = ["std", "core", "alloc"]
          EOF
      
      # Cache dependencies to speed up builds
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      # Run CPU-only tests
      - name: Run CPU tests
        run: cargo test --features cpu
  
  # Create release if tagged
  release:
    name: Create Release
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config libssl-dev libstdc++-12-dev
      
      - name: Create Linux config.toml
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [target.x86_64-unknown-linux-gnu]
          rustflags = []

          [build]
          rustflags = []

          [env]
          RUSTC_LOG = "warn"
          RUST_BACKTRACE = "1"
          RUST_LOG = "warn"

          [unstable]
          build-std = ["std", "core", "alloc"]
          EOF
      
      - name: Build release for Linux
        run: cargo build --release --features cpu,avx2,openmp
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/libhyverx.so
          asset_name: libhyverx.so
          asset_content_type: application/octet-stream 